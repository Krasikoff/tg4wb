import logging

from aiogram import F, Router
from aiogram.exceptions import AiogramError
from aiogram.filters import CommandStart
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from app.api.utils import get_json_from_card_wb

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message,):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞ —Å—Ç–∞—Ä—Ç."""
    welcome_text = (
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üß©\n\n'
        '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É:\n\n'
        '–ì–æ—Ç–æ–≤—ã? –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É! üöÄ'
    )

    try:
        one_button_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É',
                        callback_data='product_data'
                    )
                ],
            ],
        )
        await message.answer(welcome_text, reply_markup=one_button_keyboard)
    except AiogramError as e:
        logging.info('AiogramError ======= %s', e)
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
        )


@router.callback_query(F.data == 'product_data')
async def ask_article(
    callback_query: CallbackQuery,
) -> None:
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∞—Ç—Ä–∏–∫—É–ª–∞."""
    await callback_query.message.answer(
        text='–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ENTER.',
        reply_markup=None,
    )


@router.message()
async def send_echo(
    message: Message,
) -> None:
    """–ï—Å–ª–∏ —Ü–∏—Ñ—Ä—ã - –∞—Ä—Ç–∏–∫—É–ª, –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –Ω–µ—Ç - HELP."""
    if message.text.isdigit():
        try:
            product_dict = await get_json_from_card_wb(message.text)
            try:
                product_str = str(product_dict)
            except KeyError:
                product_str = (
                    f'{product_dict["detail"]}'
                    f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä—É —Å —ç—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º:'
                    f' {message.text}'
                )
            await message.answer(
                text=product_str,
                reply_markup=None,
            )
        except Exception as e:
            logging.info('AiogramError ======= %s', e)
            await message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. '
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
            )
    else:
        await message.reply(
            f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—É {message.text}'
            f'ü§∑\n\n–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ email user@pochta.com '
            '—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è'
            ' /help',
        )
    await cmd_start(message)
